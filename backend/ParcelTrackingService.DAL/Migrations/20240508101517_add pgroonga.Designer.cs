// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParcelTrackingService.DAL;

#nullable disable

namespace ParcelTrackingService.DAL.Migrations
{
    [DbContext(typeof(ParcelTrackingServiceContext))]
    [Migration("20240508101517_add pgroonga")]
    partial class addpgroonga
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgroonga");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.DeliveryStatus", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<int>("GeneralDeliveryState")
                        .HasColumnType("integer");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("delivery_statuses");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.Parcel", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<Guid>("ParcelInfoId")
                        .HasColumnType("uuid");

                    b.HasIndex("ParcelInfoId");

                    b.ToTable("parcels");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.ParcelInfo", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<string>("DeliveryDestinationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliverySourceAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ParcelContentPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceToPay")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("SenderId")
                        .HasColumnType("uuid");

                    b.HasIndex("DeliveryDestinationAddress");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DeliveryDestinationAddress"), "pgroonga");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("DeliveryDestinationAddress"), new[] { "pgroonga_varchar_full_text_search_ops_v2" });

                    b.HasIndex("DeliverySourceAddress");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DeliverySourceAddress"), "pgroonga");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("DeliverySourceAddress"), new[] { "pgroonga_varchar_full_text_search_ops_v2" });

                    b.HasIndex("Description");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Description"), "pgroonga");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Description"), new[] { "pgroonga_varchar_full_text_search_ops_v2" });

                    b.HasIndex("SenderId");

                    b.ToTable("parcel_infos");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.ParcelStatus", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeliveryStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelId")
                        .HasColumnType("uuid");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("DeliveryStatusId");

                    b.HasIndex("ParcelId");

                    b.ToTable("parcel_statuses");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.PostOffice", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Address");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Address"), "pgroonga");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Address"), new[] { "pgroonga_varchar_full_text_search_ops_v2" });

                    b.HasIndex("Code");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Code"), "pgroonga");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Code"), new[] { "pgroonga_varchar_full_text_search_ops_v2" });

                    b.HasIndex(new[] { "Code" }, "post_offices_code_key")
                        .IsUnique();

                    b.ToTable("post_offices");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.User", b =>
                {
                    b.HasBaseType("ParcelTrackingService.DAL.Entities.BaseEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.DeliveryStatus", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.DeliveryStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.Parcel", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.Parcel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelTrackingService.DAL.Entities.ParcelInfo", "ParcelInfo")
                        .WithMany()
                        .HasForeignKey("ParcelInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParcelInfo");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.ParcelInfo", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.ParcelInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelTrackingService.DAL.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.ParcelStatus", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.DeliveryStatus", "DeliveryStatus")
                        .WithMany()
                        .HasForeignKey("DeliveryStatusId");

                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.ParcelStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelTrackingService.DAL.Entities.Parcel", "Parcel")
                        .WithMany("ParcelStatusHistory")
                        .HasForeignKey("ParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.PostOffice", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.PostOffice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.User", b =>
                {
                    b.HasOne("ParcelTrackingService.DAL.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("ParcelTrackingService.DAL.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelTrackingService.DAL.Entities.Parcel", b =>
                {
                    b.Navigation("ParcelStatusHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
